#!/usr/bin/env python3

import sys, cgi, urllib, json
import pandas as pd
from sqlalchemy import create_engine
from datetime import datetime

dt = datetime.now()
now = dt.microsecond
now_file = "../../htdocs/datadownlow-dev/results/" + str(now) + ".csv"
js_file = "results/" + str(now) + ".csv"
# create engine
f = open('secure/secure')
user = f.readline().rstrip()
pw = f.readline().rstrip()
sql_url = f.readline().rstrip()
sql_port = f.readline().rstrip()
use_db = f.readline().rstrip()
f.close()

engine = create_engine('mysql://' + user + ':' + pw + '@' + sql_url + ':' + sql_port + '/' + use_db)

connection = engine.connect()
query_sql = ""
# sql statements

# start new stuff 
page_data = cgi.FieldStorage()
data = json.loads(page_data.getvalue("data"))
request_type = data['type']

autofill_columns = ['STATE_NAME',
                    'AGENCY_TYPE_NAME',
                    'POPULATION_GROUP_DESC',
                    'OFFENDER_RACE',
                    'OFFENDER_ETHNICITY',
                    'OFFENSE_NAME ',
                    ]

four_tables = ['bias_desc', 'location_name', 'offense_name', 'victim_types']

def jsonify(somestring):
    new_string = somestring[1:]
    new_string = new_string[:-1]
    new_string += ","
    return new_string

def loop_tables(table, data_obj):
    # new_sql = ''
    if len(data_obj[table.upper()]) > 0:
        table_sql = "SELECT INCIDENT_ID FROM " + table + " WHERE " + table.upper() + " IN ("
        sql = "SELECT DISTINCT " + table.upper() + " FROM " + table + ";"
        df = pd.read_sql(sql, con=engine)
        new_bit = loop_data(table, data_obj, df)
        table_sql += new_bit[:-2] + ")"
        table_df = pd.read_sql(table_sql, con=engine)
        return set(table_df.INCIDENT_ID)
    else:
        return set()

def loop_columns(column, data_obj):
    if len(data_obj[column.upper()]) > 0:
        column_sql = "SELECT INCIDENT_ID FROM hate_crime1 WHERE " + column.upper() + " IN ("
        # new_sql += "WHERE " + table.upper() + " "
        sql = "SELECT DISTINCT " + column.upper() + " FROM hate_crime1;"
        df = pd.read_sql(sql, con=engine)
        new_bit = loop_data(column, data_obj, df)
        column_sql += new_bit[:-2] + ")"
        column_df = pd.read_sql(column_sql, con=engine)
        return set(column_df.INCIDENT_ID)
    else:
        return set()

def loop_stuff(column, data_obj):
    table = ''
    if column in four_tables:
        table = column
    else:
        table = 'hate_crime1'
    # print(column)
    if len(data_obj[column.upper()]) > 0:
        column_sql = "SELECT INCIDENT_ID FROM " + table + " WHERE " + column.upper() + " IN ("
        sql = "SELECT DISTINCT " + column.upper() + " FROM hate_crime1;"
        # print(column_sql) # looks ok
        # print(sql) # looks ok
        df = pd.read_sql(sql, con=engine)
        new_bit = loop_data(column, data_obj, df)
        column_sql += new_bit[:-2] + ")"
        column_df = pd.read_sql(column_sql, con=engine)
        return set(column_df.INCIDENT_ID)
    else:
        return set()

def loop_data(column, data_obj, some_df):
    new_sql = ''     
    for desc in data_obj[column.upper()]:
        big_table = column.upper()
        row = some_df[some_df[big_table] == desc][big_table]
        term = row.iloc[0]
        new_sql += " \'" + term  + "\', "
    return new_sql


if request_type == "start":
    # get all the data to start
    print("Content-type: text/html\n\n")
    json_str = "{"
    sql = "SELECT COLUMN_NAME from INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'hate_crimes' and TABLE_NAME = 'hate_crime';"
    df = pd.read_sql(sql, con=engine)
    json_str += jsonify(df.to_json())
    for column in autofill_columns:
        sql = "SELECT DISTINCT " + column + " FROM hate_crime1;"
        df = pd.read_sql(sql, con=engine)
        json_str += jsonify(df.to_json())
    for table in four_tables:
        sql = "SELECT DISTINCT " + table.upper() + " FROM " + table + ";"
        df = pd.read_sql(sql, con=engine)
        json_str += jsonify(df.to_json())
    json_str = json_str[:-1] + "}"
    print(json_str)
elif request_type == "test": 
    sql = "select * from hate_crime1 limit 20"
# main function of api!!!
elif request_type == "filter":
    # start off right
    print("Content-type: text/html\n\n")
    # init query string
    query_sql += "select * from hate_crime1 WHERE INCIDENT_ID IN ("
    table_sets = []
    columns_list = autofill_columns[:-1] + four_tables
    # print(len(columns_list)) # prints 10 which is good
    for table in columns_list: # loop through four separate tables to get ids of matching records
        # print(table) #prints the 10 names OK
        new_set = loop_stuff(table, data)
        # print(len(new_set))
        if len(new_set) > 0:
            table_sets.append(new_set)
    id_set = set.intersection(*table_sets)
    # print(len(id_set))
    for id in id_set:
        query_sql += " \'" + str(id)  + "\', "
    query_sql = query_sql[:-2] + " ) LIMIT 1000"
    # print(query_sql)
else:
    print('test')
    sql = "select COUNT(INCIDENT_ID) as COUNT from hate_crime1;"

# print(query_sql)
if request_type != "start":
    # query_sql += " LIMIT 1000"
    df = pd.read_sql(query_sql, con=engine)
    df.to_csv(now_file, index=False)

#     # print("Content-type: text/html\n\n")
#     # print(page_data.getvalue("type"))
    print(js_file)
